{"version":3,"sources":["assets/images/logotype_white.svg","utils/constants.js","components/common/MenuList/index.js","store/selectors/app.js","store/selectors/wallet.js","store/slices/walletSlice.js","store/actions/walletActions.js","store/slices/appSlice.js","store/actions/appActions.js","utils/environment.js","api/api.js","utils/toast/index.js","components/Header/ApiKeyModal/ApiKeyModalView.js","components/Header/ApiKeyModal/index.js","components/Header/ApiKeyModal/ApiKeyModalContainer.js","components/Header/WalletStatusModal/index.js","components/common/CopyToClipboard/index.js","components/elements/WalletInitializeForm/index.js","components/elements/RestoreWalletForm/index.js","components/Header/WalletInitModal/index.js","components/Header/HeaderView.js","components/Header/index.js","components/Header/HeaderContainer.js","components/layout/index.js","components/common/InfoCard/index.js","components/elements/SynchCard/index.js","components/pages/Dashboard/index.js","components/pages/Wallet/components/PaymentSendForm/index.js","components/pages/Wallet/components/GetBalanceForm/index.js","components/pages/Wallet/components/GetWalletAddressesForm/index.js","components/pages/Wallet/index.js","router/router.js","store/reducers/rootReducer.js","store/middlewares/walletMiddleware.js","App.js","store/index.js","index.js"],"names":["module","exports","swaggerInterface","website","explorer","nanoErgInErg","localRouteList","dashboard","href","icon","faChartLine","title","wallet","faExchangeAlt","externalRouteList","constants","faBook","faWpexplorer","faGlobe","withRouter","pathname","location","className","Object","values","map","index","key","clsx","active","to","rel","target","apiKeySelector","createSelector","state","app","apiKey","walletSelector","isWalletUnlockedSelector","isWalletUnlocked","isWalletInitializedSelector","isWalletInitialized","createSlice","name","initialState","reducers","setIsWalletUnlocked","payload","setIsWalletInitialized","checkWalletStatus","createAction","walletSlice","actions","setApiKey","action","appSlice","nodeApiLink","NetworkError","status","message","data","statusText","this","prototype","create","Error","nodeApi","axios","baseURL","environment","timeout","crossDomain","headers","interceptors","response","use","Promise","resolve","error","reject","toastStates","success","text","options","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","progressClassName","info","ApiKeyModalView","showModal","handleHide","submitForm","handleShow","onClick","renderButton","Modal","show","onHide","centered","initialValues","onSubmit","Header","closeButton","Title","Body","type","placeholder","Footer","ApiKeyModalContainer","connect","dispatch","dispatchSetApiKey","appActions","memo","props","useState","setShowModal","get","api_key","then","customToast","catch","WalletStatusForm","setState","walletUnlock","pass","post","walletLock","submitWalletUnlockForm","setSubmitting","resetForm","setStatus","dispatchSetIsWalletUnlocked","err","errMessage","detail","submitWalletLockForm","confirm","aria-labelledby","isSubmitting","id","htmlFor","disabled","Component","isWalletUnlock","walletActions","CopyToClipboard","startTimer","timerId","setTimeout","showTooltip","onCopy","e","preventDefault","copy","children","handleOnTooltipClose","myRef","React","createRef","ref","faCopy","Overlay","current","placement","Tooltip","clearTimeout","PureComponent","initialFormValues","walletPassword","mnemonicPass","WalletInitializeForm","isShowMnemonic","walletInit","a","handleSubmit","result","msg","mnemonic","role","aria-hidden","walletRestore","WalletInitModal","dispatchCheckWalletStatus","size","RestoreWalletForm","isApiKeySetted","Navbar","expand","Brand","src","logo","alt","ApiKeyModal","WalletStatusModal","renderWalletForms","HeaderContainer","useEffect","Layout","InfoCard","color","SynchCard","renderActiveSynchronization","faSync","spin","renderCompleteSynchronization","faCheck","renderSynchronizationState","complete","getSynchronizationState","fullHeight","headersHeight","nextProps","nodeInfo","currentSynchState","Dashboard","getNodeCurrentState","setNodeCurrentState","setTimer","setInterval","clearInterval","faExclamationTriangle","peersCount","bestHeaderId","launchTime","appVersion","isMining","format","Date","recipientAddress","amount","PaymentSendForm","isShowTransactionId","paymentSend","address","value","Number","GetBalanceForm","isShowBalance","getBalance","balance","toFixed","displayType","thousandSeparator","suffix","GetWalletAddressesForm","isShowWalletAddresses","getWalletAddresses","walletAddresses","addr","Wallet","renderState","unlocked","renderWalletUnlockedState","locked","renderWalletLockedState","initialized","renderInitializedState","Router","basename","exact","path","component","combineReducers","reducer","store","next","getState","isUnlocked","isInitialized","configure","configureStore","rootReducer","middleware","getDefaultMiddleware","walletMiddleware","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0be7d170.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logotype_white.4dcfd639.svg\";","export default {\n  swaggerInterface: '/swagger',\n  website: 'https://ergoplatform.org',\n  explorer: 'https://explorer.ergoplatform.com',\n  nanoErgInErg: 1000000000,\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChartLine,\n  faExchangeAlt,\n  faGlobe,\n  faBook,\n} from '@fortawesome/free-solid-svg-icons'\nimport clsx from 'clsx'\nimport { faWpexplorer } from '@fortawesome/free-brands-svg-icons'\nimport { withRouter, Link } from 'react-router-dom'\nimport constants from '../../../utils/constants'\n\nconst localRouteList = {\n  dashboard: {\n    href: '/',\n    icon: <FontAwesomeIcon icon={faChartLine}></FontAwesomeIcon>,\n    title: 'Dashboard',\n  },\n  wallet: {\n    href: '/wallet',\n    icon: <FontAwesomeIcon icon={faExchangeAlt}></FontAwesomeIcon>,\n    title: 'Wallet',\n  },\n}\n\nconst externalRouteList = {\n  swaggerInterface: {\n    href: constants.swaggerInterface,\n    icon: <FontAwesomeIcon icon={faBook}></FontAwesomeIcon>,\n    title: 'Swagger',\n  },\n  explorer: {\n    href: constants.explorer,\n    icon: <FontAwesomeIcon icon={faWpexplorer}></FontAwesomeIcon>,\n    title: 'Explorer',\n  },\n  website: {\n    href: constants.website,\n    icon: <FontAwesomeIcon icon={faGlobe}></FontAwesomeIcon>,\n    title: 'Website',\n  },\n}\n\nconst MenuList = ({ location: { pathname } }) => {\n  return (\n    <div>\n      <p className=\"h5 pl-3 pt-4\">Menu</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(localRouteList).map(({ href, icon, title }, index) => (\n          <Link\n            key={title}\n            className={clsx('list-group-item list-group-item-action', {\n              'list-group-item-dark': href === pathname,\n              active: href === pathname,\n              'border-top-0': index === 0,\n            })}\n            to={href}\n          >\n            {icon} {title}\n          </Link>\n        ))}\n      </div>\n      <p className=\"h5 pl-3 pt-4\">External links</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(externalRouteList).map(\n          ({ href, icon, title }, index) => (\n            <a\n              key={title}\n              className={clsx('list-group-item list-group-item-action', {\n                'border-top-0': index === 0,\n              })}\n              href={href}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {icon} {title}\n            </a>\n          ),\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(MenuList)\n","import { createSelector } from 'redux-starter-kit'\n\nexport const appSelector = state => state.app\n\nexport const apiKeySelector = createSelector(appSelector, app => app.apiKey)\n","import { createSelector } from 'redux-starter-kit'\n\nexport const walletSelector = state => state.wallet\n\nexport const isWalletUnlockedSelector = createSelector(\n  walletSelector,\n  wallet => wallet.isWalletUnlocked,\n)\n\nexport const isWalletInitializedSelector = createSelector(\n  walletSelector,\n  wallet => wallet.isWalletInitialized,\n)\n","import { createSlice } from 'redux-starter-kit'\n\nconst initialState = {\n  isWalletUnlocked: null,\n  isWalletInitialized: null,\n}\n\nexport default createSlice({\n  name: 'walletSlice',\n  initialState,\n  reducers: {\n    setIsWalletUnlocked: (state, { payload }) => {\n      state.isWalletUnlocked = payload\n    },\n    setIsWalletInitialized: (state, { payload }) => {\n      state.isWalletInitialized = payload\n    },\n  },\n})\n","import { createAction } from 'redux-starter-kit'\nimport walletSlice from '../slices/walletSlice'\n\nconst checkWalletStatus = createAction('checkWalletStatus')\n\nexport default {\n  ...walletSlice.actions,\n  checkWalletStatus,\n}\n","import { createSlice } from 'redux-starter-kit'\n\nconst initialState = {\n  apiKey: '',\n}\n\nexport default createSlice({\n  name: 'appSlice',\n  initialState,\n  reducers: {\n    setApiKey: (state, action) => {\n      state.apiKey = action.payload\n    },\n  },\n})\n","import appSlice from '../slices/appSlice'\n\nexport default {\n  ...appSlice.actions,\n}\n","const appConfig = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return {\n      nodeApiLink: '/',\n    }\n  }\n\n  return {\n    /* default testnet api */\n    nodeApiLink: 'http://0.0.0.0:9052/',\n  }\n}\n\nexport default {\n  ...appConfig(),\n}\n","import axios from 'axios'\nimport environment from '../utils/environment'\n\nfunction NetworkError({ status, message, data, statusText }) {\n  this.name = 'NetworkError'\n  this.message = message || statusText\n  this.status = status\n  this.data = data\n}\n\nNetworkError.prototype = Object.create(Error.prototype)\n\nconst nodeApi = axios.create({\n  baseURL: environment.nodeApiLink,\n  timeout: 1000 * 10,\n  crossDomain: true,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\nnodeApi.interceptors.response.use(\n  response => Promise.resolve(response),\n  error => Promise.reject(new NetworkError(error.response || error)),\n)\n\nexport default nodeApi\n","import { toast } from 'react-toastify'\nimport './index.scss'\n\nconst toastStates = {\n  success: (text, options) =>\n    toast.success(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--success',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--success',\n      ...options,\n    }),\n  error: (text, options) =>\n    toast.error(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--error',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--error',\n      ...options,\n    }),\n  info: toast.info,\n}\n\nexport default (state, text, options) =>\n  toastStates[state]\n    ? toastStates[state](text, options)\n    : new Error(`Bad toast state`)\n","import React from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { Formik, Form, Field } from 'formik'\n\nconst renderButton = (apiKey, handleShow) => {\n  if (apiKey === '') {\n    return (\n      <button onClick={handleShow} className=\"btn btn-success\">\n        Set API key\n      </button>\n    )\n  }\n\n  return (\n    <button onClick={handleShow} className=\"btn btn-primary\">\n      Update API key\n    </button>\n  )\n}\n\nconst ApiKeyModalView = ({\n  showModal,\n  handleHide,\n  submitForm,\n  apiKey,\n  handleShow,\n}) => {\n  return (\n    <div>\n      {renderButton(apiKey, handleShow)}\n      <Modal show={showModal} onHide={() => handleHide()} centered>\n        <Formik initialValues={{ apiKey }} onSubmit={submitForm}>\n          {() => (\n            <Form>\n              <Modal.Header closeButton>\n                <Modal.Title>Authorization</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <p className=\"text\">Set API key to access Node requests</p>\n                <div className=\"input-group\">\n                  <Field\n                    type=\"text\"\n                    name=\"apiKey\"\n                    className=\"form-control\"\n                    placeholder=\"Enter API key\"\n                  />\n                </div>\n              </Modal.Body>\n\n              <Modal.Footer>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-outline-secondary\"\n                  onClick={handleHide}\n                >\n                  Close\n                </button>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Save changes\n                </button>\n              </Modal.Footer>\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n    </div>\n  )\n}\n\nexport default ApiKeyModalView\n","import ApiKeyModalContainer from './ApiKeyModalContainer'\n\nexport default ApiKeyModalContainer\n","import React, { memo, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport appActions from '../../../store/actions/appActions'\nimport nodeApi from '../../../api/api'\nimport customToast from '../../../utils/toast'\nimport ApiKeyModalView from './ApiKeyModalView'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchSetApiKey: apiKey => dispatch(appActions.setApiKey(apiKey)),\n})\n\nconst ApiKeyModalContainer = props => {\n  const { dispatchSetApiKey, apiKey } = props\n\n  const [showModal, setShowModal] = useState(false)\n\n  const handleShow = () => {\n    setShowModal(true)\n  }\n\n  const handleHide = () => {\n    setShowModal(false)\n  }\n\n  const submitForm = values => {\n    // Check API key for random get method\n    nodeApi\n      .get('/wallet/status', {\n        headers: {\n          api_key: values.apiKey,\n        },\n      })\n      .then(() => {\n        dispatchSetApiKey(values.apiKey)\n        customToast('success', 'API key is set successfully')\n        handleHide()\n      })\n      .catch(() => {\n        customToast('error', 'Bad API key')\n      })\n  }\n\n  return (\n    <ApiKeyModalView\n      showModal={showModal}\n      apiKey={apiKey}\n      handleHide={handleHide}\n      submitForm={submitForm}\n      handleShow={handleShow}\n    />\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(ApiKeyModalContainer))\n","import React, { Component, memo } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport { Formik, Field, Form } from 'formik'\nimport { connect } from 'react-redux'\nimport { isWalletUnlockedSelector } from '../../../store/selectors/wallet'\nimport walletActions from '../../../store/actions/walletActions'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport customToast from '../../../utils/toast'\nimport nodeApi from '../../../api/api'\n\nconst mapStateToProps = state => ({\n  isWalletUnlocked: isWalletUnlockedSelector(state),\n  apiKey: apiKeySelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchSetIsWalletUnlocked: isWalletUnlock =>\n    dispatch(walletActions.setIsWalletUnlocked(isWalletUnlock)),\n})\n\nclass WalletStatusForm extends Component {\n  state = {\n    showModal: false,\n  }\n\n  handleShow = () => {\n    this.setState({ showModal: true })\n  }\n\n  handleHide = () => {\n    this.setState({ showModal: false })\n  }\n\n  walletUnlock = pass =>\n    nodeApi.post(\n      '/wallet/unlock',\n      { pass },\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n\n  walletLock = () =>\n    nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.props.apiKey,\n      },\n    })\n\n  submitWalletUnlockForm = (\n    { pass },\n    { setSubmitting, resetForm, setStatus },\n  ) => {\n    setStatus({ status: 'submitting' })\n    this.walletUnlock(pass)\n      .then(() => {\n        resetForm({ pass: '' })\n        customToast('success', 'Your wallet is unlocked successfully')\n        this.props.dispatchSetIsWalletUnlocked(true)\n        this.handleHide()\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  submitWalletLockForm = () => {\n    // eslint-disable-next-line\n    if (confirm('Are you sure want to lock wallet?')) {\n      this.walletLock()\n        .then(() => {\n          customToast('success', 'Your wallet is locked successfully')\n          this.props.dispatchSetIsWalletUnlocked(false)\n        })\n        .catch(err => {\n          const errMessage = err.data ? err.data.detail : err.message\n          customToast('error', errMessage)\n        })\n    }\n  }\n\n  renderButton = () => {\n    if (!this.props.isWalletUnlocked) {\n      return (\n        <button onClick={this.handleShow} className=\"btn btn-warning\">\n          Unlock wallet\n        </button>\n      )\n    }\n\n    return (\n      <button onClick={this.submitWalletLockForm} className=\"btn btn-success\">\n        Lock wallet\n      </button>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderButton()}\n        <Modal\n          show={this.state.showModal}\n          onHide={() => this.handleHide()}\n          centered\n          aria-labelledby=\"example-custom-modal-styling-title\"\n        >\n          <Formik\n            initialValues={{ pass: '' }}\n            onSubmit={this.submitWalletUnlockForm}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <Modal.Header closeButton>\n                  <Modal.Title id=\"example-custom-modal-styling-title\">\n                    Unlock wallet form\n                  </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"wallet-password-input\">\n                      Wallet password *\n                    </label>\n                    <Field\n                      name=\"pass\"\n                      type=\"password\"\n                      id=\"wallet-password-input\"\n                      className=\"form-control\"\n                      placeholder=\"Enter wallet password\"\n                    />\n                    <small\n                      id=\"walletPasswordHelp\"\n                      className=\"form-text text-muted\"\n                    >\n                      * If you have it <b>or leave field empty</b>\n                    </small>\n                  </div>\n                </Modal.Body>\n\n                <Modal.Footer>\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    onClick={this.handleHide}\n                  >\n                    Close\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    disabled={isSubmitting}\n                  >\n                    Save changes\n                  </button>\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(WalletStatusForm))\n","import React from 'react'\nimport copy from 'clipboard-copy'\nimport { Overlay, Tooltip } from 'react-bootstrap'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass CopyToClipboard extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.myRef = React.createRef()\n    this.state = { showTooltip: false }\n  }\n\n  render() {\n    return (\n      <>\n        <a\n          href=\"#copyClipboard\"\n          ref={this.myRef}\n          onClick={this.onCopy}\n          className=\"font-weight-bold text-decoration-none\"\n        >\n          {this.props.children}\n          &nbsp;\n          <FontAwesomeIcon icon={faCopy} />\n        </a>\n        <Overlay\n          target={this.myRef.current}\n          show={this.state.showTooltip}\n          placement=\"right\"\n        >\n          <Tooltip>Copied!</Tooltip>\n        </Overlay>\n      </>\n    )\n  }\n\n  startTimer = () => {\n    const timerId = setTimeout(\n      () => this.setState({ showTooltip: false }),\n      1500,\n    )\n    this.setState({ timerId })\n  }\n\n  onCopy = e => {\n    e.preventDefault()\n    copy(this.props.children)\n    this.setState({ showTooltip: true })\n    this.startTimer()\n  }\n\n  handleOnTooltipClose = () => {\n    this.setState({ showTooltip: false })\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timerId)\n  }\n}\n\nexport default CopyToClipboard\n","import React, { Component, memo } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../api/api'\nimport CopyToClipboard from '../../common/CopyToClipboard'\nimport customToast from '../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n  mnemonicPass: '',\n}\n\nclass WalletInitializeForm extends Component {\n  state = { isShowMnemonic: false }\n\n  walletInit = async ({ walletPassword, mnemonicPass }) => {\n    const { data } = await nodeApi.post(\n      '/wallet/init',\n      { pass: walletPassword, mnemonicPass },\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n\n    return data\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletInit(values)\n      .then(result => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet successfully initialized. Please, save your mnemonic -{' '}\n              <CopyToClipboard>{result.mnemonic}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowMnemonic: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"card bg-white p-4 mb-4\">\n        <h2 className=\"h5 mb-3\">Initialize wallet</h2>\n        <Formik initialValues={initialFormValues} onSubmit={this.handleSubmit}>\n          {({ status, isSubmitting }) => (\n            <Form>\n              {status && status.state === 'error' && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {status.msg}\n                </div>\n              )}\n              {status &&\n                status.state === 'success' &&\n                this.state.isShowMnemonic && (\n                  <div className=\"alert alert-success alert-dismissible\">\n                    <button\n                      type=\"button\"\n                      className=\"close\"\n                      onClick={() => this.setState({ isShowMnemonic: false })}\n                    >\n                      <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {status.msg}\n                  </div>\n                )}\n              <div className=\"form-group\">\n                <label htmlFor=\"wallet-password-input\">Wallet password</label>\n                <Field\n                  name=\"walletPassword\"\n                  type=\"password\"\n                  id=\"wallet-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter wallet password\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mnemonic-password-input\">\n                  Mnemonic password\n                </label>\n                <Field\n                  name=\"mnemonicPass\"\n                  type=\"password\"\n                  id=\"mnemonic-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter mnemonic password\"\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting}\n              >\n                Send\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    )\n  }\n}\n\nexport default memo(WalletInitializeForm)\n","import React, { Component, memo } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../api/api'\nimport customToast from '../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n  mnemonicPass: '',\n  mnemonic: '',\n}\n\nclass WalletInitializeForm extends Component {\n  walletRestore = async ({ walletPassword, mnemonicPass, mnemonic }) => {\n    return nodeApi.post(\n      '/wallet/restore',\n      { pass: walletPassword, mnemonicPass, mnemonic },\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletRestore(values)\n      .then(() => {\n        resetForm(initialFormValues)\n        customToast('success', 'Your wallet successfully re-stored')\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"card bg-white p-4 mb-4\">\n        <h2 className=\"h5 mb-3\">Re-store wallet</h2>\n        <Formik initialValues={initialFormValues} onSubmit={this.handleSubmit}>\n          {({ status, isSubmitting }) => (\n            <Form>\n              {status && status.state === 'error' && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {status.msg}\n                </div>\n              )}\n              {status && status.state === 'success' && (\n                <div className=\"alert alert-success\">{status.msg}</div>\n              )}\n              <div className=\"form-group\">\n                <label htmlFor=\"restore-mnemonic-input\">Mnemonic</label>\n                <Field\n                  name=\"mnemonic\"\n                  type=\"text\"\n                  id=\"restore-mnemonic-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter mnemonic\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"restore-wallet-password-input\">\n                  Wallet password\n                </label>\n                <Field\n                  name=\"walletPassword\"\n                  type=\"password\"\n                  id=\"restore-wallet-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter wallet password\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"restore-mnemonic-password-input\">\n                  Mnemonic password\n                </label>\n                <Field\n                  name=\"mnemonicPass\"\n                  type=\"password\"\n                  id=\"restore-mnemonic-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter mnemonic password\"\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting}\n              >\n                Send\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    )\n  }\n}\n\nexport default memo(WalletInitializeForm)\n","import React, { Component, memo } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport { connect } from 'react-redux'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport appActions from '../../../store/actions/appActions'\nimport WalletInitializeForm from '../../elements/WalletInitializeForm'\nimport RestoreWalletForm from '../../elements/RestoreWalletForm'\nimport walletActions from '../../../store/actions/walletActions'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchCheckWalletStatus: () => dispatch(walletActions.checkWalletStatus()),\n  dispatchSetApiKey: apiKey => dispatch(appActions.setApiKey(apiKey)),\n})\n\nclass WalletInitModal extends Component {\n  state = {\n    showModal: false,\n  }\n\n  handleShow = () => {\n    this.setState({ showModal: true })\n  }\n\n  handleHide = () => {\n    this.props.dispatchCheckWalletStatus()\n    this.setState({ showModal: false })\n  }\n\n  renderButton = () => {\n    return (\n      <button onClick={this.handleShow} className=\"btn btn-danger\">\n        Initialize wallet\n      </button>\n    )\n  }\n\n  render() {\n    const { apiKey } = this.props\n\n    return (\n      <div>\n        {this.renderButton()}\n        <Modal\n          show={this.state.showModal}\n          onHide={() => this.handleHide()}\n          centered\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"example-custom-modal-styling-title\">\n              Wallet initialization\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body className=\"row\">\n            <div className=\"col-6\">\n              <WalletInitializeForm apiKey={apiKey} />\n            </div>\n            <div className=\"col-6\">\n              <RestoreWalletForm apiKey={apiKey} />\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={this.handleHide}\n            >\n              Close\n            </button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(WalletInitModal))\n","import React, { memo } from 'react'\nimport { Navbar } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport ApiKeyModal from './ApiKeyModal'\nimport WalletStatusModal from './WalletStatusModal'\nimport WalletInitModal from './WalletInitModal'\nimport logo from '../../assets/images/logotype_white.svg'\n\nconst renderWalletForms = isWalletInitialized => {\n  if (isWalletInitialized === null) {\n    return <></>\n  }\n\n  if (isWalletInitialized) {\n    return (\n      <div className=\"ml-4\">\n        <WalletStatusModal />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"ml-4\">\n      <WalletInitModal />\n    </div>\n  )\n}\n\nconst HeaderView = ({ isApiKeySetted, isWalletInitialized }) => {\n  return (\n    <Navbar className=\"navbar-background\" expand=\"lg\">\n      <Navbar.Brand className=\"navbar-brand\">\n        <Link to=\"/\">\n          <img src={logo} alt=\"logotype\" className=\"logotype\" />\n        </Link>\n      </Navbar.Brand>\n      <div className=\"ml-4\">\n        <ApiKeyModal />\n      </div>\n      {isApiKeySetted && renderWalletForms(isWalletInitialized)}\n    </Navbar>\n  )\n}\n\nexport default memo(HeaderView)\n","import HeaderContainer from './HeaderContainer'\n\nexport default HeaderContainer\n","import React, { memo, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { apiKeySelector } from '../../store/selectors/app'\nimport { isWalletInitializedSelector } from '../../store/selectors/wallet'\nimport walletActions from '../../store/actions/walletActions'\nimport HeaderView from './HeaderView'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n  isWalletInitialized: isWalletInitializedSelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchCheckWalletStatus: () => dispatch(walletActions.checkWalletStatus()),\n})\n\nconst HeaderContainer = props => {\n  const { apiKey, dispatchCheckWalletStatus, isWalletInitialized } = props\n\n  useEffect(() => {\n    if (apiKey !== '') {\n      dispatchCheckWalletStatus()\n    }\n  }, [apiKey, dispatchCheckWalletStatus])\n\n  const isApiKeySetted = apiKey !== ''\n\n  return (\n    <HeaderView\n      isApiKeySetted={isApiKeySetted}\n      isWalletInitialized={isWalletInitialized}\n    />\n  )\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(HeaderContainer))\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport MenuList from '../common/MenuList'\nimport './index.scss'\nimport Header from '../Header'\n\nclass Layout extends Component {\n  render() {\n    return (\n      <div>\n        <Header></Header>\n        <div className=\"sidebar\">\n          <MenuList />\n        </div>\n        <main className=\"main-container\">\n          <div className=\"content h-100\">{this.props.children}</div>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Layout)\n","import React from 'react'\nimport clsx from 'clsx'\nimport './index.scss'\n\nconst InfoCard = ({ color, children, className }) => {\n  return (\n    <div\n      className={clsx(\n        {\n          'info-card': true,\n          'info-card--green': color === 'green',\n          'info-card--orange': color === 'orange',\n        },\n        className,\n      )}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default InfoCard\n","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport InfoCard from '../../common/InfoCard'\nimport './index.scss'\n\nexport default class SynchCard extends Component {\n  renderActiveSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-warning\">\n        <FontAwesomeIcon icon={faSync} spin></FontAwesomeIcon> Active\n        synchronization\n      </p>\n    </>\n  )\n\n  renderCompleteSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-success\">\n        <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon> Node is synced\n      </p>\n    </>\n  )\n\n  renderSynchronizationState = state =>\n    ({\n      active: this.renderActiveSynchronization,\n      complete: this.renderCompleteSynchronization,\n    }[state])\n\n  getSynchronizationState = ({ fullHeight, headersHeight }) => {\n    if (\n      fullHeight !== null &&\n      headersHeight !== null &&\n      fullHeight === headersHeight\n    ) {\n      return 'complete'\n    }\n\n    return 'active'\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (\n      this.getSynchronizationState(nextProps) !==\n      this.getSynchronizationState(this.props.nodeInfo)\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  render() {\n    const currentSynchState = this.getSynchronizationState(this.props.nodeInfo)\n    return (\n      <InfoCard className={this.props.className}>\n        {this.renderSynchronizationState(currentSynchState)()}\n      </InfoCard>\n    )\n  }\n}\n","import React, { Fragment, Component } from 'react'\nimport {\n  faExclamationTriangle,\n  faSync,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { format } from 'date-fns'\nimport InfoCard from '../../common/InfoCard'\nimport SynchCard from '../../elements/SynchCard'\nimport nodeApi from '../../../api/api'\n\nexport default class Dashboard extends Component {\n  state = {\n    nodeInfo: null,\n    error: null,\n  }\n\n  componentDidMount() {\n    this.setNodeCurrentState()\n    this.setTimer()\n  }\n\n  getNodeCurrentState = () => nodeApi.get('/info')\n\n  setNodeCurrentState = async () => {\n    try {\n      const { data: nodeInfo } = await this.getNodeCurrentState()\n      this.setState({ nodeInfo, error: null })\n    } catch {\n      this.setState({ error: 'Node connection is lost.' })\n    }\n  }\n\n  setTimer = () => {\n    const timerId = setInterval(this.setNodeCurrentState, 2000)\n    this.setState({ timerId })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.timerId)\n  }\n\n  render() {\n    if (this.state.error !== null) {\n      return (\n        <Fragment>\n          <div className=\"container-fluid h-100 d-flex align-items-center justify-content-center\">\n            <h3 className=\"text-danger\">\n              <FontAwesomeIcon icon={faExclamationTriangle}></FontAwesomeIcon>\n              &nbsp;\n              {this.state.error}\n            </h3>\n          </div>\n        </Fragment>\n      )\n    }\n\n    if (this.state.nodeInfo === null) {\n      return (\n        <Fragment>\n          <div className=\"container-fluid h-100 d-flex align-items-center justify-content-center\">\n            <FontAwesomeIcon\n              className=\"h1\"\n              icon={faSync}\n              spin\n            ></FontAwesomeIcon>\n          </div>\n        </Fragment>\n      )\n    }\n\n    const {\n      peersCount,\n      bestHeaderId,\n      launchTime,\n      fullHeight,\n      appVersion,\n      isMining,\n    } = this.state.nodeInfo\n\n    return (\n      <Fragment>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"card rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node version</p>\n                <p className=\"info-card__label\">{appVersion}</p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <SynchCard\n                nodeInfo={this.state.nodeInfo}\n                className=\"border-bottom\"\n              ></SynchCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node started at</p>\n                <p className=\"info-card__label\">\n                  {format(new Date(launchTime), 'MM-dd-yyyy HH:mm:ss')}\n                </p>\n              </InfoCard>\n            </div>\n            {fullHeight === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Current height</p>\n                  <p className=\"info-card__label\">{fullHeight}</p>\n                </InfoCard>\n              </div>\n            )}\n            {bestHeaderId === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Best block id</p>\n                  <p className=\"info-card__label\">{bestHeaderId}</p>\n                </InfoCard>\n              </div>\n            )}\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Mining enabled</p>\n                <p className=\"info-card__label\">\n                  {isMining ? 'true' : 'false'}\n                </p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Peers connected</p>\n                <p className=\"info-card__label\">{peersCount}</p>\n              </InfoCard>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../../api/api'\nimport customToast from '../../../../../utils/toast'\nimport CopyToClipboard from '../../../../common/CopyToClipboard'\nimport constants from '../../../../../utils/constants'\n\nconst initialFormValues = {\n  recipientAddress: '',\n  amount: '',\n}\n\nclass PaymentSendForm extends PureComponent {\n  state = {\n    isShowTransactionId: false,\n  }\n\n  paymentSend = ({ recipientAddress, amount }) =>\n    nodeApi.post(\n      '/wallet/payment/send',\n      [\n        {\n          address: recipientAddress,\n          value: Number(amount * constants.nanoErgInErg),\n        },\n      ],\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.paymentSend(values)\n      .then(({ data }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your payment successfully sent. Your transaction ID -{' '}\n              <CopyToClipboard>{data}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowTransactionId: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Payment send</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowTransactionId && (\n                    <div className=\"alert alert-success alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowTransactionId: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"recipient-address\">Recipient address</label>\n                  <Field\n                    type=\"text\"\n                    name=\"recipientAddress\"\n                    id=\"recipient-address-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter recipient address\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"amount\">Amount</label>\n                  <Field\n                    type=\"text\"\n                    name=\"amount\"\n                    id=\"amount-input\"\n                    className=\"form-control\"\n                    placeholder=\"Minimum 0.001 ERG\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PaymentSendForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Form } from 'formik'\nimport NumberFormat from 'react-number-format'\nimport nodeApi from '../../../../../api/api'\nimport customToast from '../../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n}\n\nclass GetBalanceForm extends PureComponent {\n  state = {\n    isShowBalance: false,\n  }\n\n  getBalance = () =>\n    nodeApi.get('/wallet/balances', {\n      headers: {\n        api_key: this.props.apiKey,\n      },\n    })\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getBalance(values)\n      .then(({ data: { balance } }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet balance -{' '}\n              <NumberFormat\n                value={(balance / 1000000000).toFixed(8)}\n                displayType={'text'}\n                thousandSeparator={true}\n                suffix={' ERG'}\n                className=\"font-weight-bold\"\n              />\n            </>\n          ),\n        })\n        this.setState({ isShowBalance: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get confirmed wallet balance</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowBalance && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() => this.setState({ isShowBalance: false })}\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Get\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetBalanceForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Form } from 'formik'\nimport nodeApi from '../../../../../api/api'\nimport customToast from '../../../../../utils/toast'\nimport CopyToClipboard from '../../../../common/CopyToClipboard'\n\nclass GetWalletAddressesForm extends PureComponent {\n  state = {\n    isShowWalletAddresses: false,\n  }\n\n  getWalletAddresses = () =>\n    nodeApi.get('/wallet/addresses', {\n      headers: {\n        api_key: this.props.apiKey,\n      },\n    })\n\n  handleSubmit = (values, { setSubmitting, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getWalletAddresses(values)\n      .then(({ data: walletAddresses }) => {\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              <p className=\"mb-1\">Wallet Addresses:</p>\n              <ul className=\"mb-3\">\n                {walletAddresses.map(addr => (\n                  <li className=\"mb-1\" key={addr}>\n                    <CopyToClipboard>{addr}</CopyToClipboard>\n                  </li>\n                ))}\n              </ul>\n            </>\n          ),\n        })\n        this.setState({ isShowWalletAddresses: true })\n        setSubmitting(false)\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get all wallet addresses</h2>\n          <Formik onSubmit={this.handleSubmit}>\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowWalletAddresses && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowWalletAddresses: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Get\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetWalletAddressesForm\n","import React, { Component, memo } from 'react'\nimport { connect } from 'react-redux'\nimport PaymentSendForm from './components/PaymentSendForm'\nimport GetBalanceForm from './components/GetBalanceForm'\nimport GetWalletAddressesForm from './components/GetWalletAddressesForm'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport {\n  isWalletInitializedSelector,\n  isWalletUnlockedSelector,\n} from '../../../store/selectors/wallet'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n  isWalletInitialized: isWalletInitializedSelector(state),\n  isWalletUnlocked: isWalletUnlockedSelector(state),\n})\n\nclass Wallet extends Component {\n  renderState = state =>\n    ({\n      unlocked: apiKey => this.renderWalletUnlockedState(apiKey),\n      locked: () => this.renderWalletLockedState(),\n      initialized: apiKey => this.renderInitializedState(apiKey),\n    }[state])\n\n  renderWalletUnlockedState = apiKey => (\n    <div className=\"container-fluid pt-4\">\n      <div className=\"row\">\n        <PaymentSendForm apiKey={apiKey} />\n        <GetBalanceForm apiKey={apiKey} />\n        <GetWalletAddressesForm apiKey={apiKey} />\n      </div>\n    </div>\n  )\n\n  renderWalletLockedState = () => (\n    <div className=\"container-fluid pt-4\">\n      <p>\n        The wallet UI is locked. You need to unlock the wallet to access its UI.\n      </p>\n    </div>\n  )\n\n  renderInitializedState = () => (\n    <div className=\"container-fluid pt-4\">\n      <p>You need to initializer your wallet to access wallet UI.</p>\n    </div>\n  )\n\n  render() {\n    const { apiKey, isWalletUnlocked, isWalletInitialized } = this.props\n\n    if (apiKey === '') {\n      return (\n        <div className=\"container-fluid pt-4\">\n          <p>For continue need to set API key.</p>\n        </div>\n      )\n    }\n\n    if (!isWalletInitialized) {\n      return this.renderState('initialized')(apiKey)\n    }\n\n    if (isWalletUnlocked) {\n      return this.renderState('unlocked')(apiKey)\n    }\n\n    return this.renderState('locked')()\n  }\n}\n\nexport default connect(mapStateToProps)(memo(Wallet))\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Layout from '../components/layout'\nimport Dashboard from '../components/pages/Dashboard'\nimport Wallet from '../components/pages/Wallet'\n\nconst Router = () => (\n  <BrowserRouter basename=\"/panel\">\n    <Layout>\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route exact path=\"/wallet\" component={Wallet} />\n      </Switch>\n    </Layout>\n  </BrowserRouter>\n)\n\nexport default Router\n","import { combineReducers } from 'redux'\nimport appSlice from '../slices/appSlice'\nimport walletSlice from '../slices/walletSlice'\n\nexport default combineReducers({\n  app: appSlice.reducer,\n  wallet: walletSlice.reducer,\n})\n","import walletActions from '../actions/walletActions'\nimport nodeApi from '../../api/api'\nimport { apiKeySelector } from '../selectors/app'\n\nexport default store => next => action => {\n  const { dispatch, getState } = store\n  const apiKey = apiKeySelector(getState())\n\n  switch (action.type) {\n    case walletActions.checkWalletStatus.type:\n      nodeApi\n        .get('/wallet/status', {\n          headers: {\n            api_key: apiKey,\n          },\n        })\n        .then(({ data: { isUnlocked, isInitialized } }) => {\n          dispatch(walletActions.setIsWalletUnlocked(isUnlocked))\n          dispatch(walletActions.setIsWalletInitialized(isInitialized))\n        })\n        .catch(() => {})\n\n      break\n\n    default:\n      break\n  }\n  next(action)\n}\n","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { Provider } from 'react-redux'\nimport Router from './router/router'\nimport createStore from './store'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './assets/styles/index.scss'\nimport 'react-toastify/dist/ReactToastify.min.css'\n\ntoast.configure()\nconst store = createStore()\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  )\n}\n\nexport default App\n","import { configureStore, getDefaultMiddleware } from 'redux-starter-kit'\nimport rootReducer from './reducers/rootReducer'\nimport walletMiddleware from './middlewares/walletMiddleware'\n\nexport default () => {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), walletMiddleware],\n  })\n\n  return store\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}